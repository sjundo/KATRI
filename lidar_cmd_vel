#!/usr/bin/env python3

# 모듈 가져오기
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from math import *
import os

# 클래스 생성
class Lidar_class: 

# 초기화 및 초기 설정 
    def __init__(self):
        # 노드 이름 설정
        rospy.init_node("wego_node")
        # 노드 역할 설정
        self.ctrl_pub = rospy.Publisher("/cmd_vel",Twist,queue_size=3)
        rospy.Subscriber("/scan",LaserScan,self.lidar_CB)
        lidar_msg = LaserScan()
        
    # 함수 설정
    def lidar_CB(self,msg):

        sensitivity = 0
        ob_degree = []
        ob_index=[]
        ctrl_msg = Twist()
        os.system('clear')
        degree = [(msg.angle_min + msg.angle_increment*index)*180/pi for index, value in enumerate(msg.ranges)]

        for index, v in enumerate(msg.ranges):
            if abs(degree[index]) <= 90 and  0 < msg.ranges[index] < 0.25:
                sensitivity+=1
                ob_degree.append(degree[index])
                ob_index.append(index)
            else:
                pass

        # 인덱스의 수 -> 측정된 각도의 갯수 의미 -> 물체의 크기
        if sensitivity > 15:
            print("Warning")
            ctrl_msg.linear.x = 0.0
            obstacle_start = ob_index[0]
            obstacle_end = ob_index[-1]
            right_space = obstacle_start
            left_space = 450-obstacle_end
            

            if right_space > left_space:
                print("Right")
                ctrl_msg.angular.z = -1
            else:
                print("Left")
                ctrl_msg.angular.z = 1

        else :
            print("straight")
            ctrl_msg.linear.x = 1

        self.ctrl_pub.publish(ctrl_msg)

def main():
    e_stop=Lidar_class()
    rospy.spin()

if __name__=="__main__":
    main()
